---
# Only XFS is supported in GlusterFS

# Create mount directories if not already present
- name: Create mount directories if not already present
  file:
     path: "{{ item.path }}"
     state: directory
  with_items: "{{ gluster_infra_mount_devices }}"

# Reload systemctl daemon before mounting disks
- name: Reload systemctl daemon
  systemd:
    daemon_reload: yes

# In case of vdo disks, use different mount options
- name: Set mount options for VDO
  set_fact:
     vdo_opts: ",_netdev,x-systemd.device-timeout=0,x-systemd.requires=vdo.service"
  when: gluster_infra_vdo is defined

# Get the UUID of the disks to be mounted
- name: Get the UUID of the devices
  shell: blkid /dev/{{item.vgname}}/{{item.lvname}} |
             awk '{ print $2 }' | sed 's/"//g'
  register: dev_uuid
  with_items: "{{ gluster_infra_mount_devices }}"

# Build a new list of dictionaries of devices, including their UUID
- name: Add UUID into the list of mount devices
  set_fact:
     mount_devices_with_uuid: "{{ mount_devices_with_uuid|default([]) +
                                  [item.item|combine({'uuid':item.stdout})] }}"
  loop: "{{ dev_uuid.results }}"
  no_log: true

- name: Mount the vdo devices (If any)
  register: lvmount_vdo
  mount:
     path: "{{ item.path }}"
     state: mounted
     fstype: xfs
     opts: "inode64,noatime,nodiratime{{ vdo_opts|default('')}}"
     src: "{{ item.uuid }}"
  with_items: "{{ mount_devices_with_uuid }}"
  when: vdo_devs is defined and vdo_devs|length > 0 and item.vgname in vdo_devs

- name: Mount the devices
  register: lvmount
  mount:
     path: "{{ item.path }}"
     state: mounted
     fstype: xfs
     opts: "inode64,noatime,nodiratime"
     src: "{{ item.uuid }}"
  with_items: "{{ mount_devices_with_uuid }}"
  when: vdo_devs is not defined or (vdo_devs is defined and item.vgname not in vdo_devs)

- name: update mount fact's
  setup:
   filter: 'ansible_mounts'
  when: lvmount.changed or lvmount_vdo.changed

- name: Set Gluster specific SeLinux context on the bricks
  sefcontext:
     target: "{{ (item.path | realpath | regex_escape()) + '(/.*)?' }}"
     setype: glusterd_brick_t
     state: present
  with_items: "{{ gluster_infra_mount_devices }}"
  when: gluster_set_selinux_labels| default(false)| bool == true

- name: restore file(s) default SELinux security contexts
  command: restorecon -Rv "{{ item.path }}"
  with_items: "{{ gluster_infra_mount_devices }}"
  when: gluster_set_selinux_labels| default(false)| bool == true
